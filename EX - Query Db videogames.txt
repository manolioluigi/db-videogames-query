SELECT

1- Selezionare tutte le software house americane (3)

SELECT id, name
FROM software_houses
WHERE country = 'United States';

2- Selezionare tutti i giocatori della città di 'Rogahnland' (2)

SELECT *
FROM players
WHERE city = 'Rogahnland';

3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)

SELECT *
FROM players
WHERE SUBSTRING(name, -1) = 'a';

4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)

SELECT *
FROM reviews
WHERE player_id = 800;

5- Contare quanti tornei ci sono stati nell'anno 2015 (9)

SELECT COUNT(*)
FROM tournaments
WHERE year = 2015;

6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)

SELECT *
FROM awards
WHERE description LIKE '%facere%';

7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)

SELECT DISTINCT videogames.id
FROM videogames
JOIN category_videogame ON videogames.id = category_videogame.videogame_id
WHERE category_videogame.category_id IN (2, 6);

8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)

SELECT *
FROM reviews
WHERE rating BETWEEN 2 AND 4;

9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)

SELECT *
FROM videogames
WHERE release_date BETWEEN '2020-01-01' AND '2020-12-31';

10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da 5 stelle, mostrandoli una sola volta (443)

SELECT DISTINCT videogame_id
FROM reviews
WHERE rating = 5;

*********** BONUS ***********

11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)

SELECT
  COUNT(*) AS number_of_reviews,
  AVG(rating) AS average_rating
FROM reviews
WHERE videogame_id = 412;

12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)

SELECT COUNT(*) AS number_of_games
FROM videogames
WHERE software_house_id = 1 AND YEAR(release_date) = 2018;

------------------------------------------------------------------------------------------------------------------------------------------------------------

GROUP BY

1- Contare quante software house ci sono per ogni paese (3)

SELECT country, COUNT(*) AS number_of_software_houses
FROM software_houses
GROUP BY country;

2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)

SELECT videogame_id, COUNT(*) AS number_of_reviews
FROM reviews
GROUP BY videogame_id;

3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)

SELECT pegi_label_id, COUNT(*) AS number_of_games
FROM pegi_label_videogame
GROUP BY pegi_label_id;

4- Mostrare il numero di videogiochi rilasciati ogni anno (11)

SELECT YEAR(release_date) AS release_year, COUNT(*) AS number_of_games
FROM videogames
GROUP BY release_year;

5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)

SELECT device_id, COUNT(*) AS number_of_games
FROM device_videogame
GROUP BY device_id;

6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)

SELECT videogame_id, AVG(rating) AS average_rating
FROM reviews
GROUP BY videogame_id
ORDER BY average_rating DESC;

------------------------------------------------------------------------------------------------------------------------------------------------------------

JOIN

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)

SELECT DISTINCT p.*
FROM players p
JOIN reviews r ON p.id = r.player_id;

2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)

SELECT DISTINCT tournament_videogame.videogame_id
FROM tournament_videogame
JOIN tournaments ON tournament_videogame.tournament_id = tournaments.id
WHERE tournaments.year = 2016;

3- Mostrare le categorie di ogni videogioco (1718)

SELECT DISTINCT category_videogame.videogame_id, categories.name AS category_name
FROM category_videogame
JOIN categories ON category_videogame.category_id = categories.id;

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)

SELECT DISTINCT software_houses.*
FROM software_houses
JOIN videogames ON software_houses.id = videogames.software_house_id
WHERE YEAR(videogames.release_date) > 2020;

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)

SELECT
    software_houses.id AS software_house_id,
    software_houses.name AS software_house_name,
    videogames.id AS videogame_id,
    videogames.name AS videogame_name,
    awards.id AS award_id,
    awards.name AS award_name
FROM
    software_houses
JOIN
    videogames ON software_houses.id = videogames.software_house_id
JOIN
    award_videogame ON videogames.id = award_videogame.videogame_id
JOIN
    awards ON award_videogame.award_id = awards.id;

6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)

SELECT DISTINCT
    videogames.id AS videogame_id,
    videogames.name AS videogame_name,
    categories.id AS category_id,
    categories.name AS category_name,
    pegi_labels.id AS pegi_id,
    pegi_labels.name AS pegi_label
FROM
    videogames
JOIN
    category_videogame ON videogames.id = category_videogame.videogame_id
JOIN
    categories ON category_videogame.category_id = categories.id
JOIN
    pegi_label_videogame ON videogames.id = pegi_label_videogame.videogame_id
JOIN
    pegi_labels ON pegi_label_videogame.pegi_label_id = pegi_labels.id
JOIN
    reviews ON videogames.id = reviews.videogame_id
WHERE
    reviews.rating IN (4, 5);

7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)

SELECT DISTINCT
    videogames.id AS videogame_id,
    videogames.name AS videogame_name
FROM
    tournaments
JOIN
    tournament_videogame ON tournaments.id = tournament_videogame.tournament_id
JOIN
    player_tournament ON tournaments.id = player_tournament.tournament_id
JOIN
    players ON player_tournament.player_id = players.id
JOIN
    videogames ON tournament_videogame.videogame_id = videogames.id
WHERE
    players.name LIKE 'S%';

8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)

SELECT DISTINCT
    tournaments.city
FROM
    tournaments
JOIN
    tournament_videogame ON tournaments.id = tournament_videogame.tournament_id
JOIN
    (
        SELECT
            videogames.id AS videogame_id
        FROM
            videogames
        JOIN
            award_videogame ON videogames.id = award_videogame.videogame_id
        WHERE
            award_videogame.award_id = 1
            AND award_videogame.year = 2018
        LIMIT 1
    ) AS game_of_the_year
ON
    tournament_videogame.videogame_id = game_of_the_year.videogame_id;


9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)

SELECT
    tournaments.name AS tournament_name,
    players.id AS player_id,
    players.name AS player_name
FROM
    tournaments
JOIN
    tournament_videogame ON tournaments.id = tournament_videogame.tournament_id
JOIN
    player_tournament ON tournaments.id = player_tournament.tournament_id
JOIN
    players ON player_tournament.player_id = players.id
WHERE
    tournament_videogame.videogame_id = 5
    AND tournaments.year = 2019;

*********** BONUS ***********

10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)

12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)

13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 2 (10)
